import Head from 'next/head'
import * as React from 'react'
import { MdSend, MdSettings } from "react-icons/md"
import { v4 as uuidv4 } from 'uuid';

import styles from '../styles/Home.module.css'

import { Button, Input, Container, Loading, Card, Textarea, Modal, Dropdown } from "@nextui-org/react";

interface Message {
  id: number;
  text: string;
  fromUser: boolean;
}

export default function Home() {

  const [inputText, setInputText] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [history, setHistory] = React.useState(Array<Message>({ id: 0, text: "Hello, I'm a chatbot. Ask me anything.", fromUser: false}));
  const [modal, setModal] = React.useState(false);
  const [settings, setSettings] = React.useState<{
    apiKey: string;
    organization: string;
    engine: "gpt-4" | "gpt-3.5-turbo"
  }>({apiKey: "", organization: "", engine: "gpt-3.5-turbo"});

  React.useEffect(() => {
    const settings = localStorage.getItem("settings");
    if(settings) {
      setSettings(JSON.parse(settings));
    }
  }, [])

  /**
   * Adds a message to the history
   * @param text : string
   * @param fromUser : boolean
   */
  const addMessage = (text : string, fromUser : boolean) => {
    const newMessage : Message = {
      id: uuidv4(),
      text: text,
      fromUser: fromUser,
    }
    const newHistory = history;
    newHistory.push(newMessage as Message)
    setHistory(newHistory);
  }

  const handleRequest = async () => {
    setIsLoading(true);

    // check if the settings are set
    if (settings.apiKey === "" || settings.organization === "") {
      setIsLoading(false);
      return;
    }

    const response = await fetch('/api/gpt', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        requestText: inputText,
        apiKey: settings.apiKey,
        organization: settings.organization,
        engine: settings.engine,
      }),
    });

    const data = await response.json();
    console.log(data);

    // check for error
    if(response.status == 500) {
      console.log("Error: ", data.response.error.message);
      alert("Error: " + data.response.error.message);
      setIsLoading(false);
      return;
    }

    // if no error, save settings to localstorage
    localStorage.setItem("settings", JSON.stringify(settings));

    addMessage(inputText, true);
    addMessage(data.response.choices[0].message.content, false);
    setInputText("");
    setIsLoading(false);
  }

  const handleButton = () => {
    handleRequest();
  }

  const setSelected = (e: any) => {
    console.log(e.currentKey)
  }

  return (
    <Container id="wrapper">
      <Head>
        <title>OpenAi Translator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Modal
        closeButton
        open={modal}
        onClose={() => setModal(false)}
      >
        <Modal.Header>Settings</Modal.Header>
        <Modal.Body style={{ padding: "2rem", display: "flex", flexDirection: "column", gap: "2rem"}}>
          <Input value={settings.apiKey} onChange={(e) => setSettings({...settings, apiKey: e.currentTarget.value})} clearable underlined labelPlaceholder='apiKey' />
          <Input value={settings.organization} onChange={(e) => setSettings({...settings, organization: e.currentTarget.value})} clearable underlined labelPlaceholder='organization' />
          <Dropdown>
            <Dropdown.Button>{settings.engine}</Dropdown.Button>
            <Dropdown.Menu
              selectionMode='single'
              selectedKeys={[settings.engine]}
              onSelectionChange={(e: any) => setSettings({...settings, engine: e.currentKey})}
            >
              <Dropdown.Item key="gpt-4">GPT-4</Dropdown.Item>
              <Dropdown.Item key="gpt-3.5-turbo">GPT-3.5-Turbo</Dropdown.Item>
            </Dropdown.Menu>

          </Dropdown>
        </Modal.Body>
      </Modal>

      <Container id="history" style={{
        display: "flex", 
        flexDirection: "column", 
        justifyItems: "center", 
        flexWrap: "nowrap",
        alignItems: "center", 
        marginTop: "1rem", 
        gap: "1rem",
        marginBottom: "10rem",
        }} >
        {history.map((message) => {
          return (
            <Card key={message.id} style={{ 
              margin: 0, 
              alignSelf: message.fromUser ? "flex-end" : "flex-start", 
              display: "flex",
              width: "15rem",
              height: "fit-content",
              position: "relative",
              background: message.fromUser ? "#16181a" : "#1b344c",
              overflowY: "hidden"
              }}>
              <Card.Body
                style={{
                  overflowY: "unset",
                  height: "fit-content",
                  position: "relative",
                }}
              >
                {message.text}
              </Card.Body>
            </Card>
          )
        })
        }
      </Container>

      <Container id="footer" style={{
        marginTop: 50, 
        position: "fixed",
        bottom: "0", 
        width: "90%", 
        height: "10rem", 
        overflow: "hidden", 
        background: "#00000099",
        backdropFilter: "blur(2px)",

        display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-between",
        }}>

        <Textarea 
          onChange={(e) => setInputText(e.target.value) } 
          value={inputText}  
          disabled={isLoading}
          fullWidth
          placeholder='Enter a new message'
          style={{
            width: "90%",
          }}
          />
        <Button 
          color="secondary" 
          icon={isLoading ? <Loading size="xs" /> : <MdSend style={{ width: "3rem", left: "0" }} />} 
          disabled={isLoading} 
          auto
          onClick={handleButton}
          >
        </Button>
        <Button 
          color="secondary" 
          icon={<MdSettings style={{ width: "3rem", left: "0" }} />} 
          disabled={isLoading} 
          auto
          onClick={() => setModal(true)}
          >
        </Button>
      </Container>

      </Container>
  )
}
